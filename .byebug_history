quit
decoded[0]
decoded = JWT.decode token, hmac_secret, true, { algorithm: 'HS256' }
JWT.decode token, hmac_secret, true, { algorithm: 'HS256' }
token = "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxfQ.JL9mOCBVqJoAkKynGVl-yIB6rqD7ZtNvU86e_RiJOpY"
JWT.decode token, hmac_secret, true, { algorithm: 'HS256' }
JWT.encode payload, hmac_secret, 'HS256'
JWT.decode token, hmac_secret, true, { algorithm: 'HS256' }
hmac_secret = 'secret_handshake'
  end
    'secret_handshake'
  def hmac_secret
JWT.decode token, 'secret_handshake', true, { algorithm: 'HS256' }
JWT.decode token, 'secret_handshake, true, { algorithm: 'HS256' }
JWT.encode payload, 'secret_handshake', 'HS256'
payload = { user_id: user.id }
JWT
generate_token(user)
user.authenticate(params[:password])
params[:password]
user.authenticate('pw123')
user
user = User.find_by(email: params[:email])
User.find_by(email: params[:email])
params[:password]
user.authenticate(params[:password])
User.find_by(email: params[:email])
params
params[:email]
continue
request.headers[:Authorization]
request.headers['Authorization']
quit
qiut
request.headers['Authorization']
request.headers[:Authorization]
continue
request.headers[:Authorization]
continue
request.headers[:Authorization]
continue
request.headers[:Authorization]
quit
request.headers[:Authorization]
quit
uit
request.headers[:Authorization]
exit
request.headers[:Authorization]
continue
request.headers[:Authorization]
quit
request.headers[:Authorization].split(' ')[1]
request.headers[:Authorization]
quit
request.headers['Authorization']
continue
quit
request.headers
request.headers['Authorization']
request.headers['Authorization'
  });continue
    }
      return res.json();
    } else {
      alert("login failed");
    if (res.status === 401) {
  }).then(res => {
    }
      Authorization: `Bearer ${localStorage.getItem("token")}`
    headers: {
    method: "GET",
  fetch(url, {
const requestHelper = url =>
quit
request.headers['Authorization']
request.headers
request.headers['Authorization']
exit
generate_token(user)
user.authenticate(params[:password])
user
user = User.find_by(email: params[:email])
User.find_by(email: params[:email])
quit
User.find_by(email: params[:email])
quit
exit
quit
user.authenticate(params[:password])
user
user = User.find_by(email: params[:email])
User.find_by(email: params[:email])
quit
User.find_by(email: params[:email])
exit
User.find_by(email: params[:email])
